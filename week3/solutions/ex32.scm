(define (len l) (if (null? l) 0 (+ 1 (len (cdr l)))))
(define (at n l) (if (null? l) #f (if (= n 0) (car l) (at (- n 1) (cdr l)))))
(define (init l) (if (null? l) #f (if (null (cdr l)) '() (cond (car l) (init (cdr l))))))
(define (append n m) (if (null? n) m (cons (car n) (append (cdr n) m))))
(define (all-prefixes l)
  (define (all-prefixes-h l)
    (if (null? l)
        '()
        (cons (list (car l)) (map (lambda (x) (cons (car l) x)) (all-prefixes-h (cdr l))))
    )
  )
  (all-prefixes-h l)
)

(define (len2 l) (foldr (lambda (x acc) (+ 1 acc)) 0 l))
(define (at2 n l) (car (foldl (lambda (x acc) (if (= 1 (cdr acc)) (cons x 0) (cons (car acc) (- (cdr acc) 1)))) (cons 0 n) l)))
(define (init2 l) (car (foldr (lambda (x acc) (if (= (cdr acc) 0) (cons '() 1) (cons (cons x (car acc)) 1))) (cons '() 0) l)))
(define (append2 n m) (foldr cons m n))
(define (all-prefixes2 l) (init (cons l(cdr (foldl (lambda (x acc) (cons (cons x (car acc)) (cons (car acc) (cdr acc)))) '(() ()) l)))))
